
learnSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002310  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800241c  0800241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002480  08002480  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002480  08002480  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002480  08002480  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002494  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002494  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f28  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aad  00000000  00000000  00029f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  0002ba10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013a59  00000000  00000000  0002d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a34  00000000  00000000  00040b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006deea  00000000  00000000  00049535  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b741f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000303c  00000000  00000000  000b749c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002404 	.word	0x08002404

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002404 	.word	0x08002404

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f8f3 	bl	8000348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f002 f834 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ffac 	bl	80020c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_IncTick+0x1c>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	461a      	mov	r2, r3
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x20>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4413      	add	r3, r2
 8000188:	4a03      	ldr	r2, [pc, #12]	; (8000198 <HAL_IncTick+0x20>)
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	20000004 	.word	0x20000004
 8000198:	2000002c 	.word	0x2000002c

0800019c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
  return uwTick;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <HAL_GetTick+0x10>)
 80001a2:	681b      	ldr	r3, [r3, #0]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	2000002c 	.word	0x2000002c

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff0 	bl	800019c <HAL_GetTick>
 80001bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80001c8:	d005      	beq.n	80001d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ca:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <HAL_Delay+0x40>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	461a      	mov	r2, r3
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	4413      	add	r3, r2
 80001d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001d6:	bf00      	nop
 80001d8:	f7ff ffe0 	bl	800019c <HAL_GetTick>
 80001dc:	4602      	mov	r2, r0
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	1ad3      	subs	r3, r2, r3
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d8f7      	bhi.n	80001d8 <HAL_Delay+0x28>
  {
  }
}
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000004 	.word	0x20000004

080001f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f003 0307 	and.w	r3, r3, #7
 8000202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <__NVIC_SetPriorityGrouping+0x44>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000210:	4013      	ands	r3, r2
 8000212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800021c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000226:	4a04      	ldr	r2, [pc, #16]	; (8000238 <__NVIC_SetPriorityGrouping+0x44>)
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	60d3      	str	r3, [r2, #12]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__NVIC_GetPriorityGrouping+0x18>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	0a1b      	lsrs	r3, r3, #8
 8000246:	f003 0307 	and.w	r3, r3, #7
}
 800024a:	4618      	mov	r0, r3
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	db0b      	blt.n	8000282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 021f 	and.w	r2, r3, #31
 8000270:	4906      	ldr	r1, [pc, #24]	; (800028c <__NVIC_EnableIRQ+0x34>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f202 	lsl.w	r2, r0, r2
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	f1c3 0307 	rsb	r3, r3, #7
 80002fe:	2b04      	cmp	r3, #4
 8000300:	bf28      	it	cs
 8000302:	2304      	movcs	r3, #4
 8000304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	3304      	adds	r3, #4
 800030a:	2b06      	cmp	r3, #6
 800030c:	d902      	bls.n	8000314 <NVIC_EncodePriority+0x30>
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3b03      	subs	r3, #3
 8000312:	e000      	b.n	8000316 <NVIC_EncodePriority+0x32>
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	43da      	mvns	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	401a      	ands	r2, r3
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43d9      	mvns	r1, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	4313      	orrs	r3, r2
         );
}
 800033e:	4618      	mov	r0, r3
 8000340:	3724      	adds	r7, #36	; 0x24
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff4f 	bl	80001f4 <__NVIC_SetPriorityGrouping>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800035e:	b580      	push	{r7, lr}
 8000360:	b086      	sub	sp, #24
 8000362:	af00      	add	r7, sp, #0
 8000364:	4603      	mov	r3, r0
 8000366:	60b9      	str	r1, [r7, #8]
 8000368:	607a      	str	r2, [r7, #4]
 800036a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000370:	f7ff ff64 	bl	800023c <__NVIC_GetPriorityGrouping>
 8000374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	68b9      	ldr	r1, [r7, #8]
 800037a:	6978      	ldr	r0, [r7, #20]
 800037c:	f7ff ffb2 	bl	80002e4 <NVIC_EncodePriority>
 8000380:	4602      	mov	r2, r0
 8000382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000386:	4611      	mov	r1, r2
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff81 	bl	8000290 <__NVIC_SetPriority>
}
 800038e:	bf00      	nop
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff57 	bl	8000258 <__NVIC_EnableIRQ>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80003bc:	2300      	movs	r3, #0
 80003be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d005      	beq.n	80003d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2204      	movs	r2, #4
 80003ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80003d0:	2301      	movs	r3, #1
 80003d2:	73fb      	strb	r3, [r7, #15]
 80003d4:	e051      	b.n	800047a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f022 020e 	bic.w	r2, r2, #14
 80003e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f022 0201 	bic.w	r2, r2, #1
 80003f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a22      	ldr	r2, [pc, #136]	; (8000484 <HAL_DMA_Abort_IT+0xd0>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d029      	beq.n	8000454 <HAL_DMA_Abort_IT+0xa0>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <HAL_DMA_Abort_IT+0xd4>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d022      	beq.n	8000450 <HAL_DMA_Abort_IT+0x9c>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a1f      	ldr	r2, [pc, #124]	; (800048c <HAL_DMA_Abort_IT+0xd8>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d01a      	beq.n	800044a <HAL_DMA_Abort_IT+0x96>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a1d      	ldr	r2, [pc, #116]	; (8000490 <HAL_DMA_Abort_IT+0xdc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d012      	beq.n	8000444 <HAL_DMA_Abort_IT+0x90>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <HAL_DMA_Abort_IT+0xe0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d00a      	beq.n	800043e <HAL_DMA_Abort_IT+0x8a>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1a      	ldr	r2, [pc, #104]	; (8000498 <HAL_DMA_Abort_IT+0xe4>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d102      	bne.n	8000438 <HAL_DMA_Abort_IT+0x84>
 8000432:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000436:	e00e      	b.n	8000456 <HAL_DMA_Abort_IT+0xa2>
 8000438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800043c:	e00b      	b.n	8000456 <HAL_DMA_Abort_IT+0xa2>
 800043e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000442:	e008      	b.n	8000456 <HAL_DMA_Abort_IT+0xa2>
 8000444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000448:	e005      	b.n	8000456 <HAL_DMA_Abort_IT+0xa2>
 800044a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800044e:	e002      	b.n	8000456 <HAL_DMA_Abort_IT+0xa2>
 8000450:	2310      	movs	r3, #16
 8000452:	e000      	b.n	8000456 <HAL_DMA_Abort_IT+0xa2>
 8000454:	2301      	movs	r3, #1
 8000456:	4a11      	ldr	r2, [pc, #68]	; (800049c <HAL_DMA_Abort_IT+0xe8>)
 8000458:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2201      	movs	r2, #1
 800045e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2200      	movs	r2, #0
 8000466:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046e:	2b00      	cmp	r3, #0
 8000470:	d003      	beq.n	800047a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	4798      	blx	r3
    } 
  }
  return status;
 800047a:	7bfb      	ldrb	r3, [r7, #15]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40020008 	.word	0x40020008
 8000488:	4002001c 	.word	0x4002001c
 800048c:	40020030 	.word	0x40020030
 8000490:	40020044 	.word	0x40020044
 8000494:	40020058 	.word	0x40020058
 8000498:	4002006c 	.word	0x4002006c
 800049c:	40020000 	.word	0x40020000

080004a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b08b      	sub	sp, #44	; 0x2c
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004aa:	2300      	movs	r3, #0
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004ae:	2300      	movs	r3, #0
 80004b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004b2:	e127      	b.n	8000704 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80004b4:	2201      	movs	r2, #1
 80004b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	69fa      	ldr	r2, [r7, #28]
 80004c4:	4013      	ands	r3, r2
 80004c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004c8:	69ba      	ldr	r2, [r7, #24]
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	f040 8116 	bne.w	80006fe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	2b12      	cmp	r3, #18
 80004d8:	d034      	beq.n	8000544 <HAL_GPIO_Init+0xa4>
 80004da:	2b12      	cmp	r3, #18
 80004dc:	d80d      	bhi.n	80004fa <HAL_GPIO_Init+0x5a>
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d02b      	beq.n	800053a <HAL_GPIO_Init+0x9a>
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d804      	bhi.n	80004f0 <HAL_GPIO_Init+0x50>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d031      	beq.n	800054e <HAL_GPIO_Init+0xae>
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d01c      	beq.n	8000528 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004ee:	e048      	b.n	8000582 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d043      	beq.n	800057c <HAL_GPIO_Init+0xdc>
 80004f4:	2b11      	cmp	r3, #17
 80004f6:	d01b      	beq.n	8000530 <HAL_GPIO_Init+0x90>
          break;
 80004f8:	e043      	b.n	8000582 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004fa:	4a89      	ldr	r2, [pc, #548]	; (8000720 <HAL_GPIO_Init+0x280>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d026      	beq.n	800054e <HAL_GPIO_Init+0xae>
 8000500:	4a87      	ldr	r2, [pc, #540]	; (8000720 <HAL_GPIO_Init+0x280>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d806      	bhi.n	8000514 <HAL_GPIO_Init+0x74>
 8000506:	4a87      	ldr	r2, [pc, #540]	; (8000724 <HAL_GPIO_Init+0x284>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d020      	beq.n	800054e <HAL_GPIO_Init+0xae>
 800050c:	4a86      	ldr	r2, [pc, #536]	; (8000728 <HAL_GPIO_Init+0x288>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d01d      	beq.n	800054e <HAL_GPIO_Init+0xae>
          break;
 8000512:	e036      	b.n	8000582 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000514:	4a85      	ldr	r2, [pc, #532]	; (800072c <HAL_GPIO_Init+0x28c>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d019      	beq.n	800054e <HAL_GPIO_Init+0xae>
 800051a:	4a85      	ldr	r2, [pc, #532]	; (8000730 <HAL_GPIO_Init+0x290>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d016      	beq.n	800054e <HAL_GPIO_Init+0xae>
 8000520:	4a84      	ldr	r2, [pc, #528]	; (8000734 <HAL_GPIO_Init+0x294>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d013      	beq.n	800054e <HAL_GPIO_Init+0xae>
          break;
 8000526:	e02c      	b.n	8000582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	623b      	str	r3, [r7, #32]
          break;
 800052e:	e028      	b.n	8000582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	3304      	adds	r3, #4
 8000536:	623b      	str	r3, [r7, #32]
          break;
 8000538:	e023      	b.n	8000582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	3308      	adds	r3, #8
 8000540:	623b      	str	r3, [r7, #32]
          break;
 8000542:	e01e      	b.n	8000582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	330c      	adds	r3, #12
 800054a:	623b      	str	r3, [r7, #32]
          break;
 800054c:	e019      	b.n	8000582 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d102      	bne.n	800055c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000556:	2304      	movs	r3, #4
 8000558:	623b      	str	r3, [r7, #32]
          break;
 800055a:	e012      	b.n	8000582 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d105      	bne.n	8000570 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000564:	2308      	movs	r3, #8
 8000566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	69fa      	ldr	r2, [r7, #28]
 800056c:	611a      	str	r2, [r3, #16]
          break;
 800056e:	e008      	b.n	8000582 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000570:	2308      	movs	r3, #8
 8000572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	69fa      	ldr	r2, [r7, #28]
 8000578:	615a      	str	r2, [r3, #20]
          break;
 800057a:	e002      	b.n	8000582 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800057c:	2300      	movs	r3, #0
 800057e:	623b      	str	r3, [r7, #32]
          break;
 8000580:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	2bff      	cmp	r3, #255	; 0xff
 8000586:	d801      	bhi.n	800058c <HAL_GPIO_Init+0xec>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	e001      	b.n	8000590 <HAL_GPIO_Init+0xf0>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3304      	adds	r3, #4
 8000590:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	2bff      	cmp	r3, #255	; 0xff
 8000596:	d802      	bhi.n	800059e <HAL_GPIO_Init+0xfe>
 8000598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	e002      	b.n	80005a4 <HAL_GPIO_Init+0x104>
 800059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a0:	3b08      	subs	r3, #8
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	210f      	movs	r1, #15
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	fa01 f303 	lsl.w	r3, r1, r3
 80005b2:	43db      	mvns	r3, r3
 80005b4:	401a      	ands	r2, r3
 80005b6:	6a39      	ldr	r1, [r7, #32]
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	431a      	orrs	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	f000 8096 	beq.w	80006fe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	4b59      	ldr	r3, [pc, #356]	; (8000738 <HAL_GPIO_Init+0x298>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a58      	ldr	r2, [pc, #352]	; (8000738 <HAL_GPIO_Init+0x298>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b56      	ldr	r3, [pc, #344]	; (8000738 <HAL_GPIO_Init+0x298>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ea:	4a54      	ldr	r2, [pc, #336]	; (800073c <HAL_GPIO_Init+0x29c>)
 80005ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	3302      	adds	r3, #2
 80005f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fa:	f003 0303 	and.w	r3, r3, #3
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	220f      	movs	r2, #15
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a4b      	ldr	r2, [pc, #300]	; (8000740 <HAL_GPIO_Init+0x2a0>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d013      	beq.n	800063e <HAL_GPIO_Init+0x19e>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a4a      	ldr	r2, [pc, #296]	; (8000744 <HAL_GPIO_Init+0x2a4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d00d      	beq.n	800063a <HAL_GPIO_Init+0x19a>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a49      	ldr	r2, [pc, #292]	; (8000748 <HAL_GPIO_Init+0x2a8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d007      	beq.n	8000636 <HAL_GPIO_Init+0x196>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a48      	ldr	r2, [pc, #288]	; (800074c <HAL_GPIO_Init+0x2ac>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d101      	bne.n	8000632 <HAL_GPIO_Init+0x192>
 800062e:	2303      	movs	r3, #3
 8000630:	e006      	b.n	8000640 <HAL_GPIO_Init+0x1a0>
 8000632:	2304      	movs	r3, #4
 8000634:	e004      	b.n	8000640 <HAL_GPIO_Init+0x1a0>
 8000636:	2302      	movs	r3, #2
 8000638:	e002      	b.n	8000640 <HAL_GPIO_Init+0x1a0>
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <HAL_GPIO_Init+0x1a0>
 800063e:	2300      	movs	r3, #0
 8000640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000642:	f002 0203 	and.w	r2, r2, #3
 8000646:	0092      	lsls	r2, r2, #2
 8000648:	4093      	lsls	r3, r2
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	4313      	orrs	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000650:	493a      	ldr	r1, [pc, #232]	; (800073c <HAL_GPIO_Init+0x29c>)
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	089b      	lsrs	r3, r3, #2
 8000656:	3302      	adds	r3, #2
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800066a:	4b39      	ldr	r3, [pc, #228]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4938      	ldr	r1, [pc, #224]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	4313      	orrs	r3, r2
 8000674:	600b      	str	r3, [r1, #0]
 8000676:	e006      	b.n	8000686 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000678:	4b35      	ldr	r3, [pc, #212]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	43db      	mvns	r3, r3
 8000680:	4933      	ldr	r1, [pc, #204]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 8000682:	4013      	ands	r3, r2
 8000684:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000692:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	492e      	ldr	r1, [pc, #184]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	4313      	orrs	r3, r2
 800069c:	604b      	str	r3, [r1, #4]
 800069e:	e006      	b.n	80006ae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4929      	ldr	r1, [pc, #164]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006aa:	4013      	ands	r3, r2
 80006ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	4924      	ldr	r1, [pc, #144]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	608b      	str	r3, [r1, #8]
 80006c6:	e006      	b.n	80006d6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	43db      	mvns	r3, r3
 80006d0:	491f      	ldr	r1, [pc, #124]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006e4:	68da      	ldr	r2, [r3, #12]
 80006e6:	491a      	ldr	r1, [pc, #104]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	60cb      	str	r3, [r1, #12]
 80006ee:	e006      	b.n	80006fe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006f2:	68da      	ldr	r2, [r3, #12]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4915      	ldr	r1, [pc, #84]	; (8000750 <HAL_GPIO_Init+0x2b0>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000700:	3301      	adds	r3, #1
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	fa22 f303 	lsr.w	r3, r2, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	f47f aed0 	bne.w	80004b4 <HAL_GPIO_Init+0x14>
  }
}
 8000714:	bf00      	nop
 8000716:	372c      	adds	r7, #44	; 0x2c
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	10210000 	.word	0x10210000
 8000724:	10110000 	.word	0x10110000
 8000728:	10120000 	.word	0x10120000
 800072c:	10310000 	.word	0x10310000
 8000730:	10320000 	.word	0x10320000
 8000734:	10220000 	.word	0x10220000
 8000738:	40021000 	.word	0x40021000
 800073c:	40010000 	.word	0x40010000
 8000740:	40010800 	.word	0x40010800
 8000744:	40010c00 	.word	0x40010c00
 8000748:	40011000 	.word	0x40011000
 800074c:	40011400 	.word	0x40011400
 8000750:	40010400 	.word	0x40010400

08000754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
 8000760:	4613      	mov	r3, r2
 8000762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000764:	787b      	ldrb	r3, [r7, #1]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800076a:	887a      	ldrh	r2, [r7, #2]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000770:	e003      	b.n	800077a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000772:	887b      	ldrh	r3, [r7, #2]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	611a      	str	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e02b      	b.n	80007ee <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800079e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f245 5255 	movw	r2, #21845	; 0x5555
 80007a8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	6852      	ldr	r2, [r2, #4]
 80007b2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	6892      	ldr	r2, [r2, #8]
 80007bc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80007be:	f7ff fced 	bl	800019c <HAL_GetTick>
 80007c2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 80007c4:	e008      	b.n	80007d8 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80007c6:	f7ff fce9 	bl	800019c <HAL_GetTick>
 80007ca:	4602      	mov	r2, r0
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	2b30      	cmp	r3, #48	; 0x30
 80007d2:	d901      	bls.n	80007d8 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80007d4:	2303      	movs	r3, #3
 80007d6:	e00a      	b.n	80007ee <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f1      	bne.n	80007c6 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80007ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000806:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e26c      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	f000 8087 	beq.w	8000942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000834:	4b92      	ldr	r3, [pc, #584]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 030c 	and.w	r3, r3, #12
 800083c:	2b04      	cmp	r3, #4
 800083e:	d00c      	beq.n	800085a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000840:	4b8f      	ldr	r3, [pc, #572]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 030c 	and.w	r3, r3, #12
 8000848:	2b08      	cmp	r3, #8
 800084a:	d112      	bne.n	8000872 <HAL_RCC_OscConfig+0x5e>
 800084c:	4b8c      	ldr	r3, [pc, #560]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000858:	d10b      	bne.n	8000872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085a:	4b89      	ldr	r3, [pc, #548]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d06c      	beq.n	8000940 <HAL_RCC_OscConfig+0x12c>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d168      	bne.n	8000940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e246      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800087a:	d106      	bne.n	800088a <HAL_RCC_OscConfig+0x76>
 800087c:	4b80      	ldr	r3, [pc, #512]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a7f      	ldr	r2, [pc, #508]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	e02e      	b.n	80008e8 <HAL_RCC_OscConfig+0xd4>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10c      	bne.n	80008ac <HAL_RCC_OscConfig+0x98>
 8000892:	4b7b      	ldr	r3, [pc, #492]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a7a      	ldr	r2, [pc, #488]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	4b78      	ldr	r3, [pc, #480]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a77      	ldr	r2, [pc, #476]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e01d      	b.n	80008e8 <HAL_RCC_OscConfig+0xd4>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008b4:	d10c      	bne.n	80008d0 <HAL_RCC_OscConfig+0xbc>
 80008b6:	4b72      	ldr	r3, [pc, #456]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a71      	ldr	r2, [pc, #452]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a6e      	ldr	r2, [pc, #440]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	e00b      	b.n	80008e8 <HAL_RCC_OscConfig+0xd4>
 80008d0:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a6a      	ldr	r2, [pc, #424]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b68      	ldr	r3, [pc, #416]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a67      	ldr	r2, [pc, #412]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80008e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d013      	beq.n	8000918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f0:	f7ff fc54 	bl	800019c <HAL_GetTick>
 80008f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f6:	e008      	b.n	800090a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008f8:	f7ff fc50 	bl	800019c <HAL_GetTick>
 80008fc:	4602      	mov	r2, r0
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	2b64      	cmp	r3, #100	; 0x64
 8000904:	d901      	bls.n	800090a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000906:	2303      	movs	r3, #3
 8000908:	e1fa      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090a:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f0      	beq.n	80008f8 <HAL_RCC_OscConfig+0xe4>
 8000916:	e014      	b.n	8000942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000918:	f7ff fc40 	bl	800019c <HAL_GetTick>
 800091c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	e008      	b.n	8000932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000920:	f7ff fc3c 	bl	800019c <HAL_GetTick>
 8000924:	4602      	mov	r2, r0
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b64      	cmp	r3, #100	; 0x64
 800092c:	d901      	bls.n	8000932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800092e:	2303      	movs	r3, #3
 8000930:	e1e6      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000932:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1f0      	bne.n	8000920 <HAL_RCC_OscConfig+0x10c>
 800093e:	e000      	b.n	8000942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b00      	cmp	r3, #0
 800094c:	d063      	beq.n	8000a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800094e:	4b4c      	ldr	r3, [pc, #304]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 030c 	and.w	r3, r3, #12
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00b      	beq.n	8000972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800095a:	4b49      	ldr	r3, [pc, #292]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 030c 	and.w	r3, r3, #12
 8000962:	2b08      	cmp	r3, #8
 8000964:	d11c      	bne.n	80009a0 <HAL_RCC_OscConfig+0x18c>
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d116      	bne.n	80009a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000972:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <HAL_RCC_OscConfig+0x176>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d001      	beq.n	800098a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e1ba      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	4939      	ldr	r1, [pc, #228]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 800099a:	4313      	orrs	r3, r2
 800099c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099e:	e03a      	b.n	8000a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d020      	beq.n	80009ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <HAL_RCC_OscConfig+0x270>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ae:	f7ff fbf5 	bl	800019c <HAL_GetTick>
 80009b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	e008      	b.n	80009c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009b6:	f7ff fbf1 	bl	800019c <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d901      	bls.n	80009c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009c4:	2303      	movs	r3, #3
 80009c6:	e19b      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f0      	beq.n	80009b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	4927      	ldr	r1, [pc, #156]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 80009e4:	4313      	orrs	r3, r2
 80009e6:	600b      	str	r3, [r1, #0]
 80009e8:	e015      	b.n	8000a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <HAL_RCC_OscConfig+0x270>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f0:	f7ff fbd4 	bl	800019c <HAL_GetTick>
 80009f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f6:	e008      	b.n	8000a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009f8:	f7ff fbd0 	bl	800019c <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d901      	bls.n	8000a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a06:	2303      	movs	r3, #3
 8000a08:	e17a      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1f0      	bne.n	80009f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d03a      	beq.n	8000a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d019      	beq.n	8000a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_RCC_OscConfig+0x274>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a30:	f7ff fbb4 	bl	800019c <HAL_GetTick>
 8000a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a36:	e008      	b.n	8000a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a38:	f7ff fbb0 	bl	800019c <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d901      	bls.n	8000a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a46:	2303      	movs	r3, #3
 8000a48:	e15a      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_RCC_OscConfig+0x26c>)
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f0      	beq.n	8000a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f000 fb0a 	bl	8001070 <RCC_Delay>
 8000a5c:	e01c      	b.n	8000a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_RCC_OscConfig+0x274>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a64:	f7ff fb9a 	bl	800019c <HAL_GetTick>
 8000a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6a:	e00f      	b.n	8000a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a6c:	f7ff fb96 	bl	800019c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d908      	bls.n	8000a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e140      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000
 8000a84:	42420000 	.word	0x42420000
 8000a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a8c:	4b9e      	ldr	r3, [pc, #632]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1e9      	bne.n	8000a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 80a6 	beq.w	8000bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aaa:	4b97      	ldr	r3, [pc, #604]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b94      	ldr	r3, [pc, #592]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a93      	ldr	r2, [pc, #588]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b91      	ldr	r3, [pc, #580]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad2:	4b8e      	ldr	r3, [pc, #568]	; (8000d0c <HAL_RCC_OscConfig+0x4f8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d118      	bne.n	8000b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ade:	4b8b      	ldr	r3, [pc, #556]	; (8000d0c <HAL_RCC_OscConfig+0x4f8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a8a      	ldr	r2, [pc, #552]	; (8000d0c <HAL_RCC_OscConfig+0x4f8>)
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aea:	f7ff fb57 	bl	800019c <HAL_GetTick>
 8000aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af0:	e008      	b.n	8000b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af2:	f7ff fb53 	bl	800019c <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b64      	cmp	r3, #100	; 0x64
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e0fd      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b04:	4b81      	ldr	r3, [pc, #516]	; (8000d0c <HAL_RCC_OscConfig+0x4f8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f0      	beq.n	8000af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d106      	bne.n	8000b26 <HAL_RCC_OscConfig+0x312>
 8000b18:	4b7b      	ldr	r3, [pc, #492]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	4a7a      	ldr	r2, [pc, #488]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6213      	str	r3, [r2, #32]
 8000b24:	e02d      	b.n	8000b82 <HAL_RCC_OscConfig+0x36e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10c      	bne.n	8000b48 <HAL_RCC_OscConfig+0x334>
 8000b2e:	4b76      	ldr	r3, [pc, #472]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4a75      	ldr	r2, [pc, #468]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	6213      	str	r3, [r2, #32]
 8000b3a:	4b73      	ldr	r3, [pc, #460]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4a72      	ldr	r2, [pc, #456]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b40:	f023 0304 	bic.w	r3, r3, #4
 8000b44:	6213      	str	r3, [r2, #32]
 8000b46:	e01c      	b.n	8000b82 <HAL_RCC_OscConfig+0x36e>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d10c      	bne.n	8000b6a <HAL_RCC_OscConfig+0x356>
 8000b50:	4b6d      	ldr	r3, [pc, #436]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	4a6c      	ldr	r2, [pc, #432]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6213      	str	r3, [r2, #32]
 8000b5c:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	4a69      	ldr	r2, [pc, #420]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6213      	str	r3, [r2, #32]
 8000b68:	e00b      	b.n	8000b82 <HAL_RCC_OscConfig+0x36e>
 8000b6a:	4b67      	ldr	r3, [pc, #412]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	4a66      	ldr	r2, [pc, #408]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	6213      	str	r3, [r2, #32]
 8000b76:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	4a63      	ldr	r2, [pc, #396]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000b7c:	f023 0304 	bic.w	r3, r3, #4
 8000b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d015      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b8a:	f7ff fb07 	bl	800019c <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b90:	e00a      	b.n	8000ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b92:	f7ff fb03 	bl	800019c <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d901      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e0ab      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba8:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0ee      	beq.n	8000b92 <HAL_RCC_OscConfig+0x37e>
 8000bb4:	e014      	b.n	8000be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb6:	f7ff faf1 	bl	800019c <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bbc:	e00a      	b.n	8000bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f7ff faed 	bl	800019c <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e095      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd4:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1ee      	bne.n	8000bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d105      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000be6:	4b48      	ldr	r3, [pc, #288]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a47      	ldr	r2, [pc, #284]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8081 	beq.w	8000cfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bfc:	4b42      	ldr	r3, [pc, #264]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d061      	beq.n	8000ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d146      	bne.n	8000c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c10:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <HAL_RCC_OscConfig+0x4fc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c16:	f7ff fac1 	bl	800019c <HAL_GetTick>
 8000c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1c:	e008      	b.n	8000c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c1e:	f7ff fabd 	bl	800019c <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e067      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c30:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f0      	bne.n	8000c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c44:	d108      	bne.n	8000c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	492d      	ldr	r1, [pc, #180]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000c54:	4313      	orrs	r3, r2
 8000c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c58:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a19      	ldr	r1, [r3, #32]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	4927      	ldr	r1, [pc, #156]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_RCC_OscConfig+0x4fc>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c76:	f7ff fa91 	bl	800019c <HAL_GetTick>
 8000c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c7c:	e008      	b.n	8000c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c7e:	f7ff fa8d 	bl	800019c <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d901      	bls.n	8000c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e037      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f0      	beq.n	8000c7e <HAL_RCC_OscConfig+0x46a>
 8000c9c:	e02f      	b.n	8000cfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_RCC_OscConfig+0x4fc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fa7a 	bl	800019c <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cac:	f7ff fa76 	bl	800019c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e020      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x498>
 8000cca:	e018      	b.n	8000cfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e013      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_RCC_OscConfig+0x4f4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a1b      	ldr	r3, [r3, #32]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d106      	bne.n	8000cfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d001      	beq.n	8000cfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40007000 	.word	0x40007000
 8000d10:	42420060 	.word	0x42420060

08000d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e0d0      	b.n	8000eca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d28:	4b6a      	ldr	r3, [pc, #424]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d910      	bls.n	8000d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d36:	4b67      	ldr	r3, [pc, #412]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 0207 	bic.w	r2, r3, #7
 8000d3e:	4965      	ldr	r1, [pc, #404]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d46:	4b63      	ldr	r3, [pc, #396]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d001      	beq.n	8000d58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e0b8      	b.n	8000eca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d020      	beq.n	8000da6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d70:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4a58      	ldr	r2, [pc, #352]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d88:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	494d      	ldr	r1, [pc, #308]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d040      	beq.n	8000e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d107      	bne.n	8000dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d115      	bne.n	8000df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e07f      	b.n	8000eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d107      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d109      	bne.n	8000df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e073      	b.n	8000eca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e06b      	b.n	8000eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f023 0203 	bic.w	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4936      	ldr	r1, [pc, #216]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e04:	f7ff f9ca 	bl	800019c <HAL_GetTick>
 8000e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e0a:	e00a      	b.n	8000e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0c:	f7ff f9c6 	bl	800019c <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e053      	b.n	8000eca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e22:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 020c 	and.w	r2, r3, #12
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d1eb      	bne.n	8000e0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d210      	bcs.n	8000e64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f023 0207 	bic.w	r2, r3, #7
 8000e4a:	4922      	ldr	r1, [pc, #136]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d001      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e032      	b.n	8000eca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d008      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	4916      	ldr	r1, [pc, #88]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d009      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ea2:	f000 f821 	bl	8000ee8 <HAL_RCC_GetSysClockFreq>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_RCC_ClockConfig+0x1c8>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8000ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 f984 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40022000 	.word	0x40022000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	08002468 	.word	0x08002468
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ee8:	b490      	push	{r4, r7}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ef0:	1d3c      	adds	r4, r7, #4
 8000ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d002      	beq.n	8000f28 <HAL_RCC_GetSysClockFreq+0x40>
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d003      	beq.n	8000f2e <HAL_RCC_GetSysClockFreq+0x46>
 8000f26:	e02d      	b.n	8000f84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f2a:	623b      	str	r3, [r7, #32]
      break;
 8000f2c:	e02d      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	0c9b      	lsrs	r3, r3, #18
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	0c5b      	lsrs	r3, r3, #17
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f66:	fb02 f203 	mul.w	r2, r2, r3
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	e004      	b.n	8000f7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	623b      	str	r3, [r7, #32]
      break;
 8000f82:	e002      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f86:	623b      	str	r3, [r7, #32]
      break;
 8000f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc90      	pop	{r4, r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	0800241c 	.word	0x0800241c
 8000f9c:	0800242c 	.word	0x0800242c
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	007a1200 	.word	0x007a1200
 8000fa8:	003d0900 	.word	0x003d0900

08000fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fc4:	f7ff fff2 	bl	8000fac <HAL_RCC_GetHCLKFreq>
 8000fc8:	4601      	mov	r1, r0
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fd6:	5cd3      	ldrb	r3, [r2, r3]
 8000fd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	08002478 	.word	0x08002478

08000fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fec:	f7ff ffde 	bl	8000fac <HAL_RCC_GetHCLKFreq>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	0adb      	lsrs	r3, r3, #11
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	08002478 	.word	0x08002478

08001010 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	220f      	movs	r2, #15
 800101e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_RCC_GetClockConfig+0x58>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_RCC_GetClockConfig+0x58>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_RCC_GetClockConfig+0x58>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_RCC_GetClockConfig+0x58>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_RCC_GetClockConfig+0x5c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0207 	and.w	r2, r3, #7
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40022000 	.word	0x40022000

08001070 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <RCC_Delay+0x34>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <RCC_Delay+0x38>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0a5b      	lsrs	r3, r3, #9
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800108c:	bf00      	nop
  }
  while (Delay --);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1e5a      	subs	r2, r3, #1
 8001092:	60fa      	str	r2, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f9      	bne.n	800108c <RCC_Delay+0x1c>
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	10624dd3 	.word	0x10624dd3

080010ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e01d      	b.n	80010fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d106      	bne.n	80010d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f815 	bl	8001102 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3304      	adds	r3, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f000 f962 	bl	80013b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0201 	orr.w	r2, r2, #1
 800112a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b06      	cmp	r3, #6
 800113c:	d007      	beq.n	800114e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b02      	cmp	r3, #2
 800116e:	d122      	bne.n	80011b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b02      	cmp	r3, #2
 800117c:	d11b      	bne.n	80011b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f06f 0202 	mvn.w	r2, #2
 8001186:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f8ed 	bl	800137c <HAL_TIM_IC_CaptureCallback>
 80011a2:	e005      	b.n	80011b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f8e0 	bl	800136a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f8ef 	bl	800138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d122      	bne.n	800120a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d11b      	bne.n	800120a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f06f 0204 	mvn.w	r2, #4
 80011da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8c3 	bl	800137c <HAL_TIM_IC_CaptureCallback>
 80011f6:	e005      	b.n	8001204 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f8b6 	bl	800136a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f8c5 	bl	800138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b08      	cmp	r3, #8
 8001216:	d122      	bne.n	800125e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b08      	cmp	r3, #8
 8001224:	d11b      	bne.n	800125e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0208 	mvn.w	r2, #8
 800122e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2204      	movs	r2, #4
 8001234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f899 	bl	800137c <HAL_TIM_IC_CaptureCallback>
 800124a:	e005      	b.n	8001258 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f88c 	bl	800136a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f89b 	bl	800138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b10      	cmp	r3, #16
 800126a:	d122      	bne.n	80012b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b10      	cmp	r3, #16
 8001278:	d11b      	bne.n	80012b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f06f 0210 	mvn.w	r2, #16
 8001282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2208      	movs	r2, #8
 8001288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f86f 	bl	800137c <HAL_TIM_IC_CaptureCallback>
 800129e:	e005      	b.n	80012ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 f862 	bl	800136a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f871 	bl	800138e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d10e      	bne.n	80012de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f06f 0201 	mvn.w	r2, #1
 80012d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fedb 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e8:	2b80      	cmp	r3, #128	; 0x80
 80012ea:	d10e      	bne.n	800130a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	2b80      	cmp	r3, #128	; 0x80
 80012f8:	d107      	bne.n	800130a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f8c0 	bl	800148a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001314:	2b40      	cmp	r3, #64	; 0x40
 8001316:	d10e      	bne.n	8001336 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001322:	2b40      	cmp	r3, #64	; 0x40
 8001324:	d107      	bne.n	8001336 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800132e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f835 	bl	80013a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b20      	cmp	r3, #32
 8001342:	d10e      	bne.n	8001362 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	2b20      	cmp	r3, #32
 8001350:	d107      	bne.n	8001362 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0220 	mvn.w	r2, #32
 800135a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f88b 	bl	8001478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
	...

080013b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a29      	ldr	r2, [pc, #164]	; (800146c <TIM_Base_SetConfig+0xb8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00b      	beq.n	80013e4 <TIM_Base_SetConfig+0x30>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d2:	d007      	beq.n	80013e4 <TIM_Base_SetConfig+0x30>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a26      	ldr	r2, [pc, #152]	; (8001470 <TIM_Base_SetConfig+0xbc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d003      	beq.n	80013e4 <TIM_Base_SetConfig+0x30>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a25      	ldr	r2, [pc, #148]	; (8001474 <TIM_Base_SetConfig+0xc0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d108      	bne.n	80013f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a1c      	ldr	r2, [pc, #112]	; (800146c <TIM_Base_SetConfig+0xb8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00b      	beq.n	8001416 <TIM_Base_SetConfig+0x62>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d007      	beq.n	8001416 <TIM_Base_SetConfig+0x62>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <TIM_Base_SetConfig+0xbc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d003      	beq.n	8001416 <TIM_Base_SetConfig+0x62>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a18      	ldr	r2, [pc, #96]	; (8001474 <TIM_Base_SetConfig+0xc0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d108      	bne.n	8001428 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800141c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a07      	ldr	r2, [pc, #28]	; (800146c <TIM_Base_SetConfig+0xb8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d103      	bne.n	800145c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	615a      	str	r2, [r3, #20]
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40012c00 	.word	0x40012c00
 8001470:	40000400 	.word	0x40000400
 8001474:	40000800 	.word	0x40000800

08001478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e03f      	b.n	800152e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fe30 	bl	8002128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fb8d 	bl	8001c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2220      	movs	r2, #32
 8001520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2220      	movs	r2, #32
 8001528:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b088      	sub	sp, #32
 800153a:	af02      	add	r7, sp, #8
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b20      	cmp	r3, #32
 8001554:	f040 8083 	bne.w	800165e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_UART_Transmit+0x2e>
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e07b      	b.n	8001660 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_UART_Transmit+0x40>
 8001572:	2302      	movs	r3, #2
 8001574:	e074      	b.n	8001660 <HAL_UART_Transmit+0x12a>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2221      	movs	r2, #33	; 0x21
 8001588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800158c:	f7fe fe06 	bl	800019c <HAL_GetTick>
 8001590:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	88fa      	ldrh	r2, [r7, #6]
 8001596:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	88fa      	ldrh	r2, [r7, #6]
 800159c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800159e:	e042      	b.n	8001626 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b6:	d122      	bne.n	80015fe <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2200      	movs	r2, #0
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f9b2 	bl	800192c <UART_WaitOnFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e046      	b.n	8001660 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3302      	adds	r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	e017      	b.n	8001626 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3301      	adds	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	e013      	b.n	8001626 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2200      	movs	r2, #0
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f98f 	bl	800192c <UART_WaitOnFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e023      	b.n	8001660 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800162a:	b29b      	uxth	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1b7      	bne.n	80015a0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2200      	movs	r2, #0
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f976 	bl	800192c <UART_WaitOnFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e00a      	b.n	8001660 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800165e:	2302      	movs	r3, #2
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	4613      	mov	r3, r2
 8001674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b20      	cmp	r3, #32
 8001680:	d140      	bne.n	8001704 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_UART_Receive_IT+0x26>
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e039      	b.n	8001706 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_UART_Receive_IT+0x38>
 800169c:	2302      	movs	r3, #2
 800169e:	e032      	b.n	8001706 <HAL_UART_Receive_IT+0x9e>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	88fa      	ldrh	r2, [r7, #6]
 80016b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2222      	movs	r2, #34	; 0x22
 80016c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016de:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0220 	orr.w	r2, r2, #32
 80016fe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	e000      	b.n	8001706 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001704:	2302      	movs	r3, #2
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_UART_IRQHandler+0x52>
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f9ce 	bl	8001afc <UART_Receive_IT>
      return;
 8001760:	e0cc      	b.n	80018fc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80ab 	beq.w	80018c0 <HAL_UART_IRQHandler+0x1b0>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d105      	bne.n	8001780 <HAL_UART_IRQHandler+0x70>
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80a0 	beq.w	80018c0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00a      	beq.n	80017a0 <HAL_UART_IRQHandler+0x90>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <HAL_UART_IRQHandler+0xb0>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	f043 0202 	orr.w	r2, r3, #2
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00a      	beq.n	80017e0 <HAL_UART_IRQHandler+0xd0>
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d8:	f043 0204 	orr.w	r2, r3, #4
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <HAL_UART_IRQHandler+0xf0>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	f043 0208 	orr.w	r2, r3, #8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d078      	beq.n	80018fa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_UART_IRQHandler+0x112>
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f96d 	bl	8001afc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <HAL_UART_IRQHandler+0x13a>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d031      	beq.n	80018ae <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8b8 	bl	80019c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185a:	2b00      	cmp	r3, #0
 800185c:	d023      	beq.n	80018a6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800186c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001872:	2b00      	cmp	r3, #0
 8001874:	d013      	beq.n	800189e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	4a22      	ldr	r2, [pc, #136]	; (8001904 <HAL_UART_IRQHandler+0x1f4>)
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fd96 	bl	80003b4 <HAL_DMA_Abort_IT>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d016      	beq.n	80018bc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001898:	4610      	mov	r0, r2
 800189a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800189c:	e00e      	b.n	80018bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f83b 	bl	800191a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018a4:	e00a      	b.n	80018bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f837 	bl	800191a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018ac:	e006      	b.n	80018bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f833 	bl	800191a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80018ba:	e01e      	b.n	80018fa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018bc:	bf00      	nop
    return;
 80018be:	e01c      	b.n	80018fa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_UART_IRQHandler+0x1cc>
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f8a4 	bl	8001a22 <UART_Transmit_IT>
    return;
 80018da:	e00f      	b.n	80018fc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <HAL_UART_IRQHandler+0x1ec>
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f8eb 	bl	8001acc <UART_EndTransmit_IT>
    return;
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <HAL_UART_IRQHandler+0x1ec>
    return;
 80018fa:	bf00      	nop
  }
}
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	080019fb 	.word	0x080019fb

08001908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800193c:	e02c      	b.n	8001998 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001944:	d028      	beq.n	8001998 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <UART_WaitOnFlagUntilTimeout+0x30>
 800194c:	f7fe fc26 	bl	800019c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	429a      	cmp	r2, r3
 800195a:	d21d      	bcs.n	8001998 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800196a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e00f      	b.n	80019b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	bf0c      	ite	eq
 80019a8:	2301      	moveq	r3, #1
 80019aa:	2300      	movne	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d0c3      	beq.n	800193e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff ff80 	bl	800191a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b21      	cmp	r3, #33	; 0x21
 8001a34:	d144      	bne.n	8001ac0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3e:	d11a      	bne.n	8001a76 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a54:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	1c9a      	adds	r2, r3, #2
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	621a      	str	r2, [r3, #32]
 8001a68:	e00e      	b.n	8001a88 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	621a      	str	r2, [r3, #32]
 8001a74:	e008      	b.n	8001a88 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	1c59      	adds	r1, r3, #1
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6211      	str	r1, [r2, #32]
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4619      	mov	r1, r3
 8001a96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10f      	bne.n	8001abc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff0b 	bl	8001908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b22      	cmp	r3, #34	; 0x22
 8001b0e:	d171      	bne.n	8001bf4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b18:	d123      	bne.n	8001b62 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10e      	bne.n	8001b46 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	1c9a      	adds	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
 8001b44:	e029      	b.n	8001b9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b60:	e01b      	b.n	8001b9a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6858      	ldr	r0, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	1c59      	adds	r1, r3, #1
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6291      	str	r1, [r2, #40]	; 0x28
 8001b7a:	b2c2      	uxtb	r2, r0
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e00c      	b.n	8001b9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	1c58      	adds	r0, r3, #1
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	6288      	str	r0, [r1, #40]	; 0x28
 8001b92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d120      	bne.n	8001bf0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0220 	bic.w	r2, r2, #32
 8001bbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8e4 	bl	8001db4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e002      	b.n	8001bf6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001bf4:	2302      	movs	r3, #2
  }
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c3a:	f023 030c 	bic.w	r3, r3, #12
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a52      	ldr	r2, [pc, #328]	; (8001dac <UART_SetConfig+0x1ac>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d14e      	bne.n	8001d06 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c68:	f7ff f9be 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 8001c6c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009a      	lsls	r2, r3, #2
 8001c78:	441a      	add	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	4a4a      	ldr	r2, [pc, #296]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	0119      	lsls	r1, r3, #4
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca4:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2064      	movs	r0, #100	; 0x64
 8001cae:	fb00 f303 	mul.w	r3, r0, r3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	3332      	adds	r3, #50	; 0x32
 8001cb8:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc4:	4419      	add	r1, r3
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	009a      	lsls	r2, r3, #2
 8001cd0:	441a      	add	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cdc:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001cde:	fba3 0302 	umull	r0, r3, r3, r2
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	fb00 f303 	mul.w	r3, r0, r3
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	3332      	adds	r3, #50	; 0x32
 8001cf0:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	440a      	add	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001d04:	e04d      	b.n	8001da2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d06:	f7ff f95b 	bl	8000fc0 <HAL_RCC_GetPCLK1Freq>
 8001d0a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009a      	lsls	r2, r3, #2
 8001d16:	441a      	add	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	0119      	lsls	r1, r3, #4
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009a      	lsls	r2, r3, #2
 8001d36:	441a      	add	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001d44:	fba3 0302 	umull	r0, r3, r3, r2
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	2064      	movs	r0, #100	; 0x64
 8001d4c:	fb00 f303 	mul.w	r3, r0, r3
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	3332      	adds	r3, #50	; 0x32
 8001d56:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	095b      	lsrs	r3, r3, #5
 8001d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d62:	4419      	add	r1, r3
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009a      	lsls	r2, r3, #2
 8001d6e:	441a      	add	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001d7c:	fba3 0302 	umull	r0, r3, r3, r2
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	2064      	movs	r0, #100	; 0x64
 8001d84:	fb00 f303 	mul.w	r3, r0, r3
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	3332      	adds	r3, #50	; 0x32
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <UART_SetConfig+0x1b0>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	440a      	add	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40013800 	.word	0x40013800
 8001db0:	51eb851f 	.word	0x51eb851f

08001db4 <HAL_UART_RxCpltCallback>:
	HAL_Delay(200);

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	handleStatus=1;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_UART_RxCpltCallback+0x34>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1 ,(uint8_t*)aRxBuffer,sizeof(aRxBuffer),0xFFFF);
 8001dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4908      	ldr	r1, [pc, #32]	; (8001dec <HAL_UART_RxCpltCallback+0x38>)
 8001dca:	4809      	ldr	r0, [pc, #36]	; (8001df0 <HAL_UART_RxCpltCallback+0x3c>)
 8001dcc:	f7ff fbb3 	bl	8001536 <HAL_UART_Transmit>

	//HAL_UART_Transmit(&huart1 ,(uint8_t*)"\r\n",sizeof("\r\n"),0xFFFF);

	HAL_UART_Receive_IT(&huart1,(uint8_t*)aRxBuffer,sizeof(aRxBuffer));
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4906      	ldr	r1, [pc, #24]	; (8001dec <HAL_UART_RxCpltCallback+0x38>)
 8001dd4:	4806      	ldr	r0, [pc, #24]	; (8001df0 <HAL_UART_RxCpltCallback+0x3c>)
 8001dd6:	f7ff fc47 	bl	8001668 <HAL_UART_Receive_IT>

	handleStatus=0;
 8001dda:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_UART_RxCpltCallback+0x34>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000028 	.word	0x20000028
 8001dec:	2000007c 	.word	0x2000007c
 8001df0:	2000003c 	.word	0x2000003c

08001df4 <SendATcommand>:


void SendATcommand(){
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0

	uint8_t name[] = "AT+NAME=\"zeta_bluetooth\"\r\n";
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <SendATcommand+0x74>)
 8001dfc:	f107 041c 	add.w	r4, r7, #28
 8001e00:	461d      	mov	r5, r3
 8001e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e0a:	c403      	stmia	r4!, {r0, r1}
 8001e0c:	8022      	strh	r2, [r4, #0]
 8001e0e:	3402      	adds	r4, #2
 8001e10:	0c13      	lsrs	r3, r2, #16
 8001e12:	7023      	strb	r3, [r4, #0]
	uint8_t hosten[] = "AT+ROLE=0\r\n";
 8001e14:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <SendATcommand+0x78>)
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t starten[] = "AT+STARTEN=0\r\n";
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <SendATcommand+0x7c>)
 8001e22:	463c      	mov	r4, r7
 8001e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e26:	c407      	stmia	r4!, {r0, r1, r2}
 8001e28:	8023      	strh	r3, [r4, #0]
 8001e2a:	3402      	adds	r4, #2
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	7023      	strb	r3, [r4, #0]


	  HAL_UART_Transmit(&huart1 ,(uint8_t*)name,sizeof(name),0xFFFF);
 8001e30:	f107 011c 	add.w	r1, r7, #28
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	221b      	movs	r2, #27
 8001e3a:	480e      	ldr	r0, [pc, #56]	; (8001e74 <SendATcommand+0x80>)
 8001e3c:	f7ff fb7b 	bl	8001536 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t*)hosten,sizeof(hosten),0xFFFF);
 8001e40:	f107 0110 	add.w	r1, r7, #16
 8001e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e48:	220c      	movs	r2, #12
 8001e4a:	480a      	ldr	r0, [pc, #40]	; (8001e74 <SendATcommand+0x80>)
 8001e4c:	f7ff fb73 	bl	8001536 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t*)starten,sizeof(starten),0xFFFF);
 8001e50:	4639      	mov	r1, r7
 8001e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e56:	220f      	movs	r2, #15
 8001e58:	4806      	ldr	r0, [pc, #24]	; (8001e74 <SendATcommand+0x80>)
 8001e5a:	f7ff fb6c 	bl	8001536 <HAL_UART_Transmit>

}
 8001e5e:	bf00      	nop
 8001e60:	3738      	adds	r7, #56	; 0x38
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bdb0      	pop	{r4, r5, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08002430 	.word	0x08002430
 8001e6c:	0800244c 	.word	0x0800244c
 8001e70:	08002458 	.word	0x08002458
 8001e74:	2000003c 	.word	0x2000003c

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7c:	f7fe f966 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e80:	f000 f82e 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e84:	f000 f8ae 	bl	8001fe4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001e88:	f000 f882 	bl	8001f90 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8001e8c:	f000 f866 	bl	8001f5c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  SendATcommand();
 8001e90:	f7ff ffb0 	bl	8001df4 <SendATcommand>
  //first Receive function....
  HAL_UART_Receive_IT(&huart1,(uint8_t*)aRxBuffer,sizeof(aRxBuffer));
 8001e94:	2201      	movs	r2, #1
 8001e96:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <main+0x58>)
 8001e98:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <main+0x5c>)
 8001e9a:	f7ff fbe5 	bl	8001668 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <main+0x60>)
 8001ea6:	f7fe fc55 	bl	8000754 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eae:	f7fe f97f 	bl	80001b0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb8:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <main+0x60>)
 8001eba:	f7fe fc4b 	bl	8000754 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec2:	f7fe f975 	bl	80001b0 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <main+0x64>)
 8001ec8:	f7fe fc95 	bl	80007f6 <HAL_IWDG_Refresh>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ecc:	e7e7      	b.n	8001e9e <main+0x26>
 8001ece:	bf00      	nop
 8001ed0:	2000007c 	.word	0x2000007c
 8001ed4:	2000003c 	.word	0x2000003c
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	20000030 	.word	0x20000030

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b090      	sub	sp, #64	; 0x40
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	f107 0318 	add.w	r3, r7, #24
 8001eea:	2228      	movs	r2, #40	; 0x28
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fa80 	bl	80023f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f02:	230a      	movs	r3, #10
 8001f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f06:	2301      	movs	r3, #1
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f0a:	2310      	movs	r3, #16
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fc7a 	bl	8000814 <HAL_RCC_OscConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8001f26:	f000 f8c7 	bl	80020b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fee6 	bl	8000d14 <HAL_RCC_ClockConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001f4e:	f000 f8b3 	bl	80020b8 <Error_Handler>
  }
}
 8001f52:	bf00      	nop
 8001f54:	3740      	adds	r7, #64	; 0x40
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_IWDG_Init+0x2c>)
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <MX_IWDG_Init+0x30>)
 8001f64:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MX_IWDG_Init+0x2c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_IWDG_Init+0x2c>)
 8001f6e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f72:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <MX_IWDG_Init+0x2c>)
 8001f76:	f7fe fc05 	bl	8000784 <HAL_IWDG_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001f80:	f000 f89a 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000030 	.word	0x20000030
 8001f8c:	40003000 	.word	0x40003000

08001f90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <MX_USART1_UART_Init+0x50>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001f9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fc8:	f7ff fa68 	bl	800149c <HAL_UART_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fd2:	f000 f871 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000003c 	.word	0x2000003c
 8001fe0:	40013800 	.word	0x40013800

08001fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <MX_GPIO_Init+0xa8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <MX_GPIO_Init+0xa8>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <MX_GPIO_Init+0xa8>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <MX_GPIO_Init+0xa8>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <MX_GPIO_Init+0xa8>)
 8002016:	f043 0320 	orr.w	r3, r3, #32
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <MX_GPIO_Init+0xa8>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <MX_GPIO_Init+0xa8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <MX_GPIO_Init+0xa8>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <MX_GPIO_Init+0xa8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <MX_GPIO_Init+0xa8>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <MX_GPIO_Init+0xa8>)
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_GPIO_Init+0xa8>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <MX_GPIO_Init+0xac>)
 8002060:	f7fe fb78 	bl	8000754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2302      	movs	r3, #2
 8002074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4619      	mov	r1, r3
 800207c:	4804      	ldr	r0, [pc, #16]	; (8002090 <MX_GPIO_Init+0xac>)
 800207e:	f7fe fa0f 	bl	80004a0 <HAL_GPIO_Init>

}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	40011000 	.word	0x40011000

08002094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a6:	f7fe f867 	bl	8000178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40012c00 	.word	0x40012c00

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_MspInit+0x5c>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_MspInit+0x5c>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6193      	str	r3, [r2, #24]
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_MspInit+0x5c>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_MspInit+0x5c>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_MspInit+0x5c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	61d3      	str	r3, [r2, #28]
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_MspInit+0x5c>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_MspInit+0x60>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_MspInit+0x60>)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000

08002128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_UART_MspInit+0x9c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d139      	bne.n	80021bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HAL_UART_MspInit+0xa0>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_UART_MspInit+0xa0>)
 800214e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_UART_MspInit+0xa0>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_UART_MspInit+0xa0>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_UART_MspInit+0xa0>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_UART_MspInit+0xa0>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	4619      	mov	r1, r3
 800218c:	480f      	ldr	r0, [pc, #60]	; (80021cc <HAL_UART_MspInit+0xa4>)
 800218e:	f7fe f987 	bl	80004a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4619      	mov	r1, r3
 80021a6:	4809      	ldr	r0, [pc, #36]	; (80021cc <HAL_UART_MspInit+0xa4>)
 80021a8:	f7fe f97a 	bl	80004a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2025      	movs	r0, #37	; 0x25
 80021b2:	f7fe f8d4 	bl	800035e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021b6:	2025      	movs	r0, #37	; 0x25
 80021b8:	f7fe f8ed 	bl	8000396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010800 	.word	0x40010800

080021d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	2019      	movs	r0, #25
 80021e6:	f7fe f8ba 	bl	800035e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80021ea:	2019      	movs	r0, #25
 80021ec:	f7fe f8d3 	bl	8000396 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_InitTick+0x9c>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_InitTick+0x9c>)
 80021f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_InitTick+0x9c>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002208:	f107 0210 	add.w	r2, r7, #16
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fefc 	bl	8001010 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002218:	f7fe fee6 	bl	8000fe8 <HAL_RCC_GetPCLK2Freq>
 800221c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_InitTick+0xa0>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3b01      	subs	r3, #1
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_InitTick+0xa4>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <HAL_InitTick+0xa8>)
 8002230:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_InitTick+0xa4>)
 8002234:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002238:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_InitTick+0xa4>)
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_InitTick+0xa4>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_InitTick+0xa4>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800224c:	4809      	ldr	r0, [pc, #36]	; (8002274 <HAL_InitTick+0xa4>)
 800224e:	f7fe ff2d 	bl	80010ac <HAL_TIM_Base_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <HAL_InitTick+0xa4>)
 800225a:	f7fe ff5b 	bl	8001114 <HAL_TIM_Base_Start_IT>
 800225e:	4603      	mov	r3, r0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3730      	adds	r7, #48	; 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	431bde83 	.word	0x431bde83
 8002274:	20000080 	.word	0x20000080
 8002278:	40012c00 	.word	0x40012c00

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <HardFault_Handler+0x4>

0800228e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <MemManage_Handler+0x4>

08002294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <BusFault_Handler+0x4>

0800229a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <UsageFault_Handler+0x4>

080022a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM1_UP_IRQHandler+0x10>)
 80022d6:	f7fe ff40 	bl	800115a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000080 	.word	0x20000080

080022e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <USART1_IRQHandler+0x10>)
 80022ea:	f7ff fa11 	bl	8001710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000003c 	.word	0x2000003c

080022f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <SystemInit+0x5c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <SystemInit+0x5c>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <SystemInit+0x5c>)
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4911      	ldr	r1, [pc, #68]	; (8002354 <SystemInit+0x5c>)
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <SystemInit+0x60>)
 8002310:	4013      	ands	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <SystemInit+0x5c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <SystemInit+0x5c>)
 800231a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800231e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <SystemInit+0x5c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <SystemInit+0x5c>)
 800232a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <SystemInit+0x5c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <SystemInit+0x5c>)
 8002336:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800233a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SystemInit+0x5c>)
 800233e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002342:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SystemInit+0x64>)
 8002346:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800234a:	609a      	str	r2, [r3, #8]
#endif 
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	f8ff0000 	.word	0xf8ff0000
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002360:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002362:	e003      	b.n	800236c <LoopCopyDataInit>

08002364 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002366:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002368:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800236a:	3104      	adds	r1, #4

0800236c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800236c:	480a      	ldr	r0, [pc, #40]	; (8002398 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002370:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002372:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002374:	d3f6      	bcc.n	8002364 <CopyDataInit>
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002378:	e002      	b.n	8002380 <LoopFillZerobss>

0800237a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800237c:	f842 3b04 	str.w	r3, [r2], #4

08002380 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002382:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002384:	d3f9      	bcc.n	800237a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002386:	f7ff ffb7 	bl	80022f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238a:	f000 f80f 	bl	80023ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800238e:	f7ff fd73 	bl	8001e78 <main>
  bx lr
 8002392:	4770      	bx	lr
  ldr r3, =_sidata
 8002394:	08002488 	.word	0x08002488
  ldr r0, =_sdata
 8002398:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800239c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80023a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80023a4:	200000c0 	.word	0x200000c0

080023a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_2_IRQHandler>
	...

080023ac <__libc_init_array>:
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	2500      	movs	r5, #0
 80023b0:	4e0c      	ldr	r6, [pc, #48]	; (80023e4 <__libc_init_array+0x38>)
 80023b2:	4c0d      	ldr	r4, [pc, #52]	; (80023e8 <__libc_init_array+0x3c>)
 80023b4:	1ba4      	subs	r4, r4, r6
 80023b6:	10a4      	asrs	r4, r4, #2
 80023b8:	42a5      	cmp	r5, r4
 80023ba:	d109      	bne.n	80023d0 <__libc_init_array+0x24>
 80023bc:	f000 f822 	bl	8002404 <_init>
 80023c0:	2500      	movs	r5, #0
 80023c2:	4e0a      	ldr	r6, [pc, #40]	; (80023ec <__libc_init_array+0x40>)
 80023c4:	4c0a      	ldr	r4, [pc, #40]	; (80023f0 <__libc_init_array+0x44>)
 80023c6:	1ba4      	subs	r4, r4, r6
 80023c8:	10a4      	asrs	r4, r4, #2
 80023ca:	42a5      	cmp	r5, r4
 80023cc:	d105      	bne.n	80023da <__libc_init_array+0x2e>
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023d4:	4798      	blx	r3
 80023d6:	3501      	adds	r5, #1
 80023d8:	e7ee      	b.n	80023b8 <__libc_init_array+0xc>
 80023da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023de:	4798      	blx	r3
 80023e0:	3501      	adds	r5, #1
 80023e2:	e7f2      	b.n	80023ca <__libc_init_array+0x1e>
 80023e4:	08002480 	.word	0x08002480
 80023e8:	08002480 	.word	0x08002480
 80023ec:	08002480 	.word	0x08002480
 80023f0:	08002484 	.word	0x08002484

080023f4 <memset>:
 80023f4:	4603      	mov	r3, r0
 80023f6:	4402      	add	r2, r0
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d100      	bne.n	80023fe <memset+0xa>
 80023fc:	4770      	bx	lr
 80023fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002402:	e7f9      	b.n	80023f8 <memset+0x4>

08002404 <_init>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	bf00      	nop
 8002408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240a:	bc08      	pop	{r3}
 800240c:	469e      	mov	lr, r3
 800240e:	4770      	bx	lr

08002410 <_fini>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	bf00      	nop
 8002414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002416:	bc08      	pop	{r3}
 8002418:	469e      	mov	lr, r3
 800241a:	4770      	bx	lr
